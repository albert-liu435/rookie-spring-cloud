文章来源:https://zhuanlan.zhihu.com/p/617967367

loadbalancer原理
以 rookie-loadbalancer-resttemplate项目为例进行debug
项目在启动的时候会自动装配如下
    org.springframework.cloud.loadbalancer.config.LoadBalancerAutoConfiguration
    org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration
    org.springframework.cloud.loadbalancer.config.LoadBalancerCacheAutoConfiguration
    org.springframework.cloud.loadbalancer.security.OAuth2LoadBalancerClientAutoConfiguration
    org.springframework.cloud.loadbalancer.config.LoadBalancerStatsAutoConfiguration

1、启动项目
    首先会进入到 LoadBalancerAutoConfiguration 进行实例化DeferringLoadBalancerInterceptor
    1.1 DeferringLoadBalancerInterceptor
        DeferringLoadBalancerInterceptor是一个延迟的拦截器，里面封装了BlockingLoadBalancerInterceptor,实际在进行http请求的时候是通过BlockingLoadBalancerInterceptor进行拦截的。
    1.2 进行自定义的RestTemplate实例化
        @Configuration
        //@LoadBalancerClient(name = "hello", configuration = HelloConfiguration.class)
        public class RestTemplateConfig {

            @LoadBalanced
            @Bean
        //    WebClient.Builder webClientBuilder() {
        //        return WebClient.builder();
        //    }

            RestTemplate restTemplate() {
                return new RestTemplate();
            }

        }
        RestTemplate为真正调用http请求执行的类

    1.3 进行实例化ServiceInstanceListSupplier
        @Configuration
        public class HelloConfiguration {

            @Bean
            @Primary
            ServiceInstanceListSupplier serviceInstanceListSupplier() {
                return new DemoServiceInstanceListSupplier("hello");
            }

        }
        ServiceInstanceListSupplier用于提供ServiceInstance,在通过RestTemplate进行http请求的时候，会通过ServiceInstanceListSupplier获取到ServiceInstance实例，里面封装了请求的url地址等信息

    1.4 进行实例化LoadBalancerClientFactory
        	@ConditionalOnMissingBean
        	@Bean
        	public LoadBalancerClientFactory loadBalancerClientFactory(LoadBalancerClientsProperties properties,
        			ObjectProvider<List<LoadBalancerClientSpecification>> configurations) {
        		LoadBalancerClientFactory clientFactory = new LoadBalancerClientFactory(properties);
        		clientFactory.setConfigurations(configurations.getIfAvailable(Collections::emptyList));
        		return clientFactory;
        	}

        LoadBalancerClientFactory主要用于创建client, load balancer and client configuration实例

    1.5 进行实例化BlockingLoadBalancerClient
        	@Bean
        	@ConditionalOnBean(LoadBalancerClientFactory.class)
        	@ConditionalOnMissingBean
        	public LoadBalancerClient blockingLoadBalancerClient(LoadBalancerClientFactory loadBalancerClientFactory) {
        		return new BlockingLoadBalancerClient(loadBalancerClientFactory);
        	}
        BlockingLoadBalancerClient是用来进行操作请求的时候选择的那个服务进行响应请求


2   执行请求的流程
    以请求为例：localhost:18001/hello
    org.springframework.web.client.RestTemplate#getForObject()
        --->org.springframework.web.client.RestTemplate#execute()
            --->org.springframework.web.client.RestTemplate#doExecute()
                --->org.springframework.http.client.AbstractClientHttpRequest#execute()
                    --->org.springframework.http.client.AbstractBufferingClientHttpRequest#executeInternal()
                        --->org.springframework.http.client.InterceptingClientHttpRequest#executeInternal()
                            --->org.springframework.http.client.InterceptingRequestExecution#execute()
                                --->org.springframework.cloud.client.loadbalancer.LoadBalancerInterceptor#intercept()
                                    --->org.springframework.cloud.loadbalancer.blocking.client.BlockingLoadBalancerClient#execute()
